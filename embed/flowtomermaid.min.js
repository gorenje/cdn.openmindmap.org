window.FlowToMermaid={constructMermaid:function(e,l="TB",n=void 0){for(var r={payload:e},e=r.payload.filter(e=>"tab"!=e.type&&"group"!=e.type),t={},i=0;i<e.length;i++){var a=e[i];t[a.id]=a}var s=n,o=(n||(s={nodes:{node:e=>t[e],subflow:e=>t[e]}}),e=>e&&{nnull:"not null",eq:"==",neq:"!=",lt:"<",lte:"<=",gt:">",gte:">=",hask:"has key",cont:"contains"}[e]||e),c=e=>e.replaceAll("&","&amp;").replaceAll("#","#35;").replaceAll("[","#91;").replaceAll("]","#93;").replaceAll("(","#40;").replaceAll(")","#41;").replaceAll("|","#124;").replaceAll(">","&gt;").replaceAll("<","&lt;").replaceAll("{","#123;").replaceAll("}","#125;").replaceAll("/","#47;").replaceAll('"',"#34;"),p=(e,l=void 0)=>{var n=e.name||e.type;switch(l=l?'|"'+c(l)+'"| ':"",n=c(n),e.type){case"switch":case"join":case"split":return l+e.id+'{"'+n+'"}';case"link call":case"link out":if(e.mode&&"return"==e.mode)return l+e.id+"[\\Link Return/]";if(!e.name||e.name.match(/^link out/)){if("dynamic"==e.linkType)return l+e.id+'{{"'+(n="\\Dynamic Target/")+'"}}';var r=e.links&&0<e.links.length&&(t[e.links[0]]||s.nodes.node(e.links[0])),n=c(r&&r.name||e.type)}return l+e.id+'{{"'+n+'"}}';case"link in":return n=c(e.name||e.links&&0<e.links.length&&t[e.links[0]]&&t[e.links[0]].name||e.type),l+e.id+'{{"'+n+'"}}';case"junction":return l+e.id+'(("conn"))';case"inject":case"debug":return l+e.id+'(["'+n+'"])';default:return e.type.startsWith("subflow:")&&(r=s.nodes.subflow(e.type.replace(/subflow:/,"")),n=c(r&&r.name||e.type)),l+e.id+'["'+n+'"]'}};r.mermaid=["%% change this to LR Node-RED like UML","graph "+l];for(var u,i=0;i<e.length;i++){var d=e[i];if(d.links&&0<d.links.length&&"link out"==d.type)for(var h=0;h<d.links.length;h++)t[d.links[h]]&&r.mermaid.push(p(d)+" -.-> "+d.links[h]);if(d.wires&&0<d.wires.length)if("switch"==d.type)for(var m=0;m<d.wires.length;m++)for(var f=0;f<d.wires[m].length;f++)r.mermaid.push(p(d)+" --\x3e "+p(t[d.wires[m][f]],(u=d.rules[m]).v&&u.t?o(u.t)+" "+u.v:u.v&&!u.t?u.v:o(u.t)));else{var k,w=d.outputLabels;d.type.startsWith("subflow:")&&(w=(k=s.nodes.subflow(d.type.replace(/subflow:/,"")))&&k.outputLabels||w);for(m=0;m<d.wires.length;m++)for(f=0;f<d.wires[m].length;f++)r.mermaid.push(p(d)+" --\x3e "+p(t[d.wires[m][f]],w&&w[m]||void 0))}}return r.mermaid.join("\n")}};