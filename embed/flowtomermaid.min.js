(()=>{function O(e,a,t){switch(e.arrow||"arrow"){case"--":case"line":a=""!==t?` -- "${t}" --- `:" --- ";break;case"--\x3e":case"arrow":a=""!==t?` -- "${t}" --> `:" --\x3e ";break;case"==>":case"thickarrow":a=""!==t?` == "${t}" ==> `:" ==> ";break;case"-.->":case"dotarrow":a=""!==t?` -. "${t}" .-> `:" -.-> ";break;case"-.-":a=""!==t?` -. "${t}" -.- `:" -.- ";break;case"==":a=""!==t?` == "${t}" === `:" === ";break;case"<--\x3e":a=""!==t?` <-- "${t}" --> `:" <---\x3e ";break;case"<-.->":a=""!==t?` <-. "${t}" .-> `:" <-.-> ";break;case"<==>":a=""!==t?` <== "${t}" ==> `:" <===> ";break;case"--x":a=""!==t?` -- "${t}" --x `:" --x ";break;case"-.-x":a=""!==t?` -. "${t}" .-x `:" -.-x ";break;case"==x":a=""!==t?` == "${t}" ==x `:" ===x ";break;case"x--x":a=""!==t?` x-- "${t}" --x `:" x--x ";break;case"x-.-x":a=""!==t?` x-. "${t}" .-x `:" x-.-x ";break;case"x==x":a=""!==t?` x== "${t}" ==x `:" x===x ";break;case"--o":a=""!==t?` -- "${t}" --o `:" --o ";break;case"-.-o":a=""!==t?` -. "${t}" .-o `:" -.-o ";break;case"==o":a=""!==t?` == "${t}" ==o `:" ===o ";break;case"o--o":a=""!==t?` o-- "${t}" --o `:" o--o ";break;case"o-.-o":a=""!==t?` o-. "${t}" .-o `:" o-.-o ";break;case"o==o":a=""!==t?` o== "${t}" ==o `:" o===o "}return a}function U(e){return e.every(e=>e.type.startsWith("mermaid-state-"))}window.FlowToMermaid={constructMermaid:function(e,a="TB",t=void 0){for(var r={payload:e},n={},e=r.payload.filter(e=>("group"==e.type&&(n[e.id]={nodesids:[...e.nodes||[]],name:e.name||`**missing name ${e.id}**`,env:[...e.env||[]]}),"tab"!=e.type&&"group"!=e.type)),o={},l=0;l<e.length;l++){var i=e[l];o[i.id]=i}var s=t?t:{nodes:{node:e=>o[e],subflow:e=>o[e]}};if(U(e)){for(var d=e,c=o,p=["%% Generated by the Flow2UML Node @ https://flowhub.org/flow2uml","%% change direction to LR for Node-RED left-to-right UML","stateDiagram","    direction "+a],m=(e,a,t,r)=>t?r?`    ${e} --> ${a} : ${t}(${r})`:`    ${e} --> ${a} : `+t:`    ${e} --> `+a,h=0;h<d.length;h++){var f=d[h],u=f.wirecfgs;if("mermaid-state-end"!=f.type)for(var g="mermaid-state-start"==f.type?"[*]":f.name,k=0;k<u.length;k++){var w=u[k];if("self"==w.id)p.push(m(g,g,w.action,w.payload));else{let e=c[w.id]&&c[w.id].name||"[?]";c[w.id]&&"mermaid-state-end"==c[w.id].type&&(e="[*]"),p.push(m(g,e,w.action,w.payload))}}}return p.filter(e=>e).join("\n")}var v=e=>e&&{nnull:"not null",eq:"==",neq:"!=",lt:"<",lte:"<=",gt:">",gte:">=",hask:"has key",cont:"contains"}[e]||e,y=e=>e.replaceAll("&","&amp;").replaceAll("#","#35;").replaceAll("[","#91;").replaceAll("]","#93;").replaceAll("(","#40;").replaceAll(")","#41;").replaceAll("|","#124;").replaceAll(">","&gt;").replaceAll("<","&lt;").replaceAll("{","#123;").replaceAll("}","#125;").replaceAll("/","#47;").replaceAll('"',"#34;"),b=(e,a=void 0)=>{if(!e)return"";var t=e.name||e.type;switch(a=a?'|"'+y(a)+'"| ':"",t=y(t),e.type){case"switch":case"join":case"split":return a+e.id+'{"'+t+'"}';case"link call":case"link out":if(e.mode&&"return"==e.mode)return a+e.id+"[\\Link Return/]";if(!e.name||e.name.match(/^link out/)){if("dynamic"==e.linkType)return a+e.id+'{{"'+(t="\\Dynamic Target/")+'"}}';var r=e.links&&0<e.links.length&&(o[e.links[0]]||s.nodes.node(e.links[0])),t=y(r&&r.name||e.type)}return a+e.id+'{{"'+t+'"}}';case"link in":return t=y(e.name||e.links&&0<e.links.length&&o[e.links[0]]&&o[e.links[0]].name||e.type),a+e.id+'{{"'+t+'"}}';case"junction":return a+e.id+'(("conn"))';case"inject":case"debug":return a+e.id+'(["'+t+'"])';case"http in":return a+e.id+'["'+y("["+e.method+"] "+e.url)+'"]';case"mermaid-flowchart":return e.id+`@{ shape: "${e.shape}", label: "${t}" }`;default:return e.type.startsWith("subflow:")?(r=s.nodes.subflow(e.type.replace(/subflow:/,"")),t=y(r&&r.name||e.type),a+e.id+'[/"'+t+'"/]'):a+e.id+'["'+t+'"]'}};r.mermaid=["%% Generated by the Flow2UML Node @ https://flowhub.org/flow2uml","%% change direction to LR for Node-RED left-to-right UML","flowchart "+a],console.log("FLOW2UML: WARNING when copy & pasting flow chart nodes, their connections details are losts."),console.log("FLOW2UML: WARNING This is because the configuration of wires is based on node ids, these "),console.log("FLOW2UML: WARNING node ids change on copy and paste but aren't updated in the configuration "),console.log("FLOW2UML: WARNING of individual flowchart nodes.");for(var x,l=0;l<e.length;l++){var _=e[l];if(_.links&&0<_.links.length&&"link out"==_.type)for(var D=0;D<_.links.length;D++)o[_.links[D]]&&r.mermaid.push(b(_)+" -.-> "+_.links[D]);if(_.wires&&0<_.wires.length)if("mermaid-flowchart"==_.type){(_.wirecfgs||[]).forEach(e=>{var a,t;e.id!=_.id&&"self"!=e.id||(t=_.id,o[t]&&(t=" --\x3e ",a=y(e.name||""),t=O(e," --\x3e ",a),r.mermaid.push(b(_)+t+b(_))))});for(var F=0;F<_.wires.length;F++)for(var A=0;A<_.wires[F].length;A++){var L=_.wires[F][A];(_.wirecfgs||[]).forEach(e=>{var a,t;e.id==L&&o[L]&&(t=" --\x3e ",a=y(e.name||""),t=O(e," --\x3e ",a),r.mermaid.push(b(_)+t+b(o[_.wires[F][A]],E&&E[F]||void 0)))})}}else if("switch"==_.type)for(F=0;F<_.wires.length;F++)for(A=0;A<_.wires[F].length;A++)o[_.wires[F][A]]&&r.mermaid.push(b(_)+" --\x3e "+b(o[_.wires[F][A]],(x=_.rules[F]).v&&x.t?v(x.t)+" "+x.v:x.v&&!x.t?x.v:v(x.t)));else{var N,E=_.outputLabels;_.type.startsWith("subflow:")&&(N=s.nodes.subflow(_.type.replace(/subflow:/,"")),E=N&&N.outputLabels||E);for(F=0;F<_.wires.length;F++)for(A=0;A<_.wires[F].length;A++)o[_.wires[F][A]]&&r.mermaid.push(b(_)+" --\x3e "+b(o[_.wires[F][A]],E&&E[F]||void 0))}}for(var M=Object.keys(n),j=new Set,R=e=>{var a;0<e.nodesids.length&&(r.mermaid.push(`subgraph "${y(e.name)}"`),(a=(e.env.filter(e=>"MERMAID_DIRECTION"==e.name)[0]||{value:void 0}).value)&&r.mermaid.push("direction "+a),e.nodesids.forEach(e=>{"object"==typeof e?R(e):r.mermaid.push(e)}),r.mermaid.push("end"))},W=e=>"object"==typeof e||M.indexOf(e)<0,I=0;j.size<M.length&&I<2*M.length;)M.forEach(e=>{(!(n[e]&&0<n[e].nodesids.length)||(n[e].nodesids=n[e].nodesids.map(e=>{var a;return-1<M.indexOf(e)&&j.has(e)?(a={...n[e]},delete n[e],a):e}),n[e].nodesids.every(W)))&&j.add(e)}),I+=1;return Object.keys(n).forEach(e=>{0<n[e].nodesids.length&&R(n[e])}),r.mermaid.join("\n")},constructErlangStatem:function(e){let o=[];for(var l={},a=0;a<e.length;a++){var t=e[a];l[t.id]=t}if(U(e)){var r=e;var i=l;let n=[];for(var s=0;s<r.length;s++){var d=r[s];if("mermaid-state-end"!=d.type){let r=(d.name||("mermaid-state-start"==d.type?"start":"")||"unknown_state").replaceAll(/[\s\t\n ]/g,"_").toLowerCase();n.push(`
%%
%% Definitions from '${d.name}' - #${d.id}
%%
`),(d.wirecfgs||[]).forEach(a=>{var t=i[("self"==a.id?d:a).id];if(t){t=(t.name||("mermaid-state-end"==t.type?"done":"")||"unknown_state").toLowerCase().replaceAll(/[\s\t\n ]/g,"_");if(a.action){let e="";e=d.id==a.id||"self"==a.id?a.payload?`handle_event(
    {call, From},
    {<<"${a.action}">>, <<"${a.payload}">>},
    ${r},
    Data
) ->
    {keep_state, Data, [{ reply, From, ok }]};`:`handle_event(
    {call, From},
    <<"${a.action}">>,
    ${r},
    Data
) ->
    {keep_state, Data, [{ reply, From, ok }]};`:a.payload?`handle_event(
    {call, From},
    {<<"${a.action}">>, <<"${a.payload}">>},
    ${r},
    Data
) ->
    {next_state, ${t}, Data, [{ reply, From, ok }]};`:`handle_event(
    {call, From},
    <<"${a.action}">>,
    ${r},
    Data
) ->
    {next_state, ${t}, Data, [{ reply, From, ok }]};`,n.push(e)}else n.push(`
%
% Ignoring un-named link to '${t}' - #${("self"==a.id?d:a).id}
%
`)}else n.push(`
%
% Ignoring unknown target #${a.id}
%
`)})}}return n.join("\n")}for(a=0;a<e.length;a++){var c=e[a];if("mermaid-flowchart"==c.type){let n=(c.name||"unknown_state").replaceAll(/[\s\t\n ]/g,"_").toLowerCase();o.push(`
%%
%% Definition from '${c.name}' - #${c.id}
%%
`),(c.wirecfgs||[]).forEach(a=>{var t=a.name.split(";").map(e=>e.trim()),r=(l[("self"==a.id?c:a).id].name||"unknown_state").toLowerCase().replaceAll(/[\s\t\n ]/g,"_");if(1==t.length&&""==t[0])o.push(`
%
% Ignoring un-named link to '${r}' - #${("self"==a.id?c:a).id}
%
`);else{let e="";e=c.id==a.id||"self"==a.id?1==t.length?`handle_event(
    {call, From},
    <<"${t[0]}">>,
    ${n},
    Data
) ->
    {keep_state, Data, [{ reply, From, ${t[2]||"ok"} }]};`:`handle_event(
    {call, From},
    {<<"${t[0]}">>, <<"${t[1]}">>},
    ${n},
    Data
) ->
    {keep_state, Data, [{ reply, From, ${t[2]||"ok"} }]};`:1==t.length?`handle_event(
    {call, From},
    <<"${t[0]}">>,
    ${n},
    Data
) ->
    {next_state, ${r}, Data, [{ reply, From, ${t[2]||"ok"} }]};`:`handle_event(
    {call, From},
    {<<"${t[0]}">>, <<"${t[1]}">>},
    ${n},
    Data
) ->
    {next_state, ${r}, Data, [{ reply, From, ${t[2]||"ok"} }]};`,o.push(e)}})}}return o.join("\n")}}})();