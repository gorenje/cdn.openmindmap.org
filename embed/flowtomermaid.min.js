(()=>{function N(e,a,r){switch(e.arrow||"arrow"){case"--":case"line":a=""!==r?` -- "${r}" --- `:" --- ";break;case"--\x3e":case"arrow":a=""!==r?` -- "${r}" --> `:" --\x3e ";break;case"==>":case"thickarrow":a=""!==r?` == "${r}" ==> `:" ==> ";break;case"-.->":case"dotarrow":a=""!==r?` -. "${r}" .-> `:" -.-> ";break;case"-.-":a=""!==r?` -. "${r}" -.- `:" -.- ";break;case"==":a=""!==r?` == "${r}" === `:" === ";break;case"<--\x3e":a=""!==r?` <-- "${r}" --> `:" <---\x3e ";break;case"<-.->":a=""!==r?` <-. "${r}" .-> `:" <-.-> ";break;case"<==>":a=""!==r?` <== "${r}" ==> `:" <===> ";break;case"--x":a=""!==r?` -- "${r}" --x `:" --x ";break;case"-.-x":a=""!==r?` -. "${r}" .-x `:" -.-x ";break;case"==x":a=""!==r?` == "${r}" ==x `:" ===x ";break;case"x--x":a=""!==r?` x-- "${r}" --x `:" x--x ";break;case"x-.-x":a=""!==r?` x-. "${r}" .-x `:" x-.-x ";break;case"x==x":a=""!==r?` x== "${r}" ==x `:" x===x ";break;case"--o":a=""!==r?` -- "${r}" --o `:" --o ";break;case"-.-o":a=""!==r?` -. "${r}" .-o `:" -.-o ";break;case"==o":a=""!==r?` == "${r}" ==o `:" ===o ";break;case"o--o":a=""!==r?` o-- "${r}" --o `:" o--o ";break;case"o-.-o":a=""!==r?` o-. "${r}" .-o `:" o-.-o ";break;case"o==o":a=""!==r?` o== "${r}" ==o `:" o===o "}return a}window.FlowToMermaid={constructMermaid:function(e,a="TB",r=void 0){for(var s={payload:e},o={},e=s.payload.filter(e=>("group"==e.type&&(o[e.id]={nodesids:[...e.nodes||[]],name:e.name||`**missing name ${e.id}**`,env:[...e.env||[]]}),"tab"!=e.type&&"group"!=e.type)),n={},i=0;i<e.length;i++){var l=e[i];n[l.id]=l}var t=r,c=(r||(t={nodes:{node:e=>n[e],subflow:e=>n[e]}}),e=>e&&{nnull:"not null",eq:"==",neq:"!=",lt:"<",lte:"<=",gt:">",gte:">=",hask:"has key",cont:"contains"}[e]||e),d=e=>e.replaceAll("&","&amp;").replaceAll("#","#35;").replaceAll("[","#91;").replaceAll("]","#93;").replaceAll("(","#40;").replaceAll(")","#41;").replaceAll("|","#124;").replaceAll(">","&gt;").replaceAll("<","&lt;").replaceAll("{","#123;").replaceAll("}","#125;").replaceAll("/","#47;").replaceAll('"',"#34;"),h=(e,a=void 0)=>{if(!e)return"";var r=e.name||e.type;switch(a=a?'|"'+d(a)+'"| ':"",r=d(r),e.type){case"switch":case"join":case"split":return a+e.id+'{"'+r+'"}';case"link call":case"link out":if(e.mode&&"return"==e.mode)return a+e.id+"[\\Link Return/]";if(!e.name||e.name.match(/^link out/)){if("dynamic"==e.linkType)return a+e.id+'{{"'+(r="\\Dynamic Target/")+'"}}';var s=e.links&&0<e.links.length&&(n[e.links[0]]||t.nodes.node(e.links[0])),r=d(s&&s.name||e.type)}return a+e.id+'{{"'+r+'"}}';case"link in":return r=d(e.name||e.links&&0<e.links.length&&n[e.links[0]]&&n[e.links[0]].name||e.type),a+e.id+'{{"'+r+'"}}';case"junction":return a+e.id+'(("conn"))';case"inject":case"debug":return a+e.id+'(["'+r+'"])';case"http in":return a+e.id+'["'+d("["+e.method+"] "+e.url)+'"]';case"mermaid-flowchart":return e.id+`@{ shape: "${e.shape}", label: "${r}" }`;default:return e.type.startsWith("subflow:")?(s=t.nodes.subflow(e.type.replace(/subflow:/,"")),r=d(s&&s.name||e.type),a+e.id+'[/"'+r+'"/]'):a+e.id+'["'+r+'"]'}};s.mermaid=["%% Generated by the Flow2UML Node @ https://flowhub.org/flow2uml","%% change direction to LR for Node-RED left-to-right UML","flowchart "+a],console.log("FLOW2UML: WARNING when copy & pasting flow chart nodes, their connections details are losts."),console.log("FLOW2UML: WARNING This is because the configuration of wires is based on node ids, these "),console.log("FLOW2UML: WARNING node ids change on copy and paste but aren't updated in the configuration "),console.log("FLOW2UML: WARNING of individual flowchart nodes.");for(var u,i=0;i<e.length;i++){var p=e[i];if(p.links&&0<p.links.length&&"link out"==p.type)for(var f=0;f<p.links.length;f++)n[p.links[f]]&&s.mermaid.push(h(p)+" -.-> "+p.links[f]);if(p.wires&&0<p.wires.length)if("mermaid-flowchart"==p.type){(p.wirecfgs||[]).forEach(e=>{var a,r;e.id==p.id&&(r=p.id,n[r])&&(r=" --\x3e ",a=d(e.name||""),r=N(e," --\x3e ",a),s.mermaid.push(h(p)+r+h(p)))});for(var m=0;m<p.wires.length;m++)for(var w=0;w<p.wires[m].length;w++){var k=p.wires[m][w];(p.wirecfgs||[]).forEach(e=>{var a,r;e.id==k&&n[k]&&(r=" --\x3e ",a=d(e.name||""),r=N(e," --\x3e ",a),s.mermaid.push(h(p)+r+h(n[p.wires[m][w]],g&&g[m]||void 0)))})}}else if("switch"==p.type)for(m=0;m<p.wires.length;m++)for(w=0;w<p.wires[m].length;w++)n[p.wires[m][w]]&&s.mermaid.push(h(p)+" --\x3e "+h(n[p.wires[m][w]],(u=p.rules[m]).v&&u.t?c(u.t)+" "+u.v:u.v&&!u.t?u.v:c(u.t)));else{var b,g=p.outputLabels;p.type.startsWith("subflow:")&&(b=t.nodes.subflow(p.type.replace(/subflow:/,"")),g=b&&b.outputLabels||g);for(m=0;m<p.wires.length;m++)for(w=0;w<p.wires[m].length;w++)n[p.wires[m][w]]&&s.mermaid.push(h(p)+" --\x3e "+h(n[p.wires[m][w]],g&&g[m]||void 0))}}for(var v=Object.keys(o),x=new Set,y=e=>{var a;0<e.nodesids.length&&(s.mermaid.push(`subgraph "${d(e.name)}"`),(a=(e.env.filter(e=>"MERMAID_DIRECTION"==e.name)[0]||{value:void 0}).value)&&s.mermaid.push("direction "+a),e.nodesids.forEach(e=>{"object"==typeof e?y(e):s.mermaid.push(e)}),s.mermaid.push("end"))},A=e=>"object"==typeof e||v.indexOf(e)<0,L=0;x.size<v.length&&L<2*v.length;)v.forEach(e=>{(!(o[e]&&0<o[e].nodesids.length)||(o[e].nodesids=o[e].nodesids.map(e=>{var a;return-1<v.indexOf(e)&&x.has(e)?(a={...o[e]},delete o[e],a):e}),o[e].nodesids.every(A)))&&x.add(e)}),L+=1;return Object.keys(o).forEach(e=>{0<o[e].nodesids.length&&y(o[e])}),s.mermaid.join("\n")}}})();