window.FlowToMermaid={constructMermaid:function(e,r="TB",l=void 0){for(var a={payload:e},i={},e=a.payload.filter(e=>("group"==e.type&&(i[e.id]={nodesids:[...e.nodes||[]],name:e.name||`**missing name ${e.id}**`}),"tab"!=e.type&&"group"!=e.type)),n={},t=0;t<e.length;t++){var s=e[t];n[s.id]=s}var o=l,d=(l||(o={nodes:{node:e=>n[e],subflow:e=>n[e]}}),e=>e&&{nnull:"not null",eq:"==",neq:"!=",lt:"<",lte:"<=",gt:">",gte:">=",hask:"has key",cont:"contains"}[e]||e),c=e=>e.replaceAll("&","&amp;").replaceAll("#","#35;").replaceAll("[","#91;").replaceAll("]","#93;").replaceAll("(","#40;").replaceAll(")","#41;").replaceAll("|","#124;").replaceAll(">","&gt;").replaceAll("<","&lt;").replaceAll("{","#123;").replaceAll("}","#125;").replaceAll("/","#47;").replaceAll('"',"#34;"),p=(e,r=void 0)=>{if(!e)return"";var l=e.name||e.type;switch(r=r?'|"'+c(r)+'"| ':"",l=c(l),e.type){case"switch":case"join":case"split":return r+e.id+'{"'+l+'"}';case"link call":case"link out":if(e.mode&&"return"==e.mode)return r+e.id+"[\\Link Return/]";if(!e.name||e.name.match(/^link out/)){if("dynamic"==e.linkType)return r+e.id+'{{"'+(l="\\Dynamic Target/")+'"}}';var a=e.links&&0<e.links.length&&(n[e.links[0]]||o.nodes.node(e.links[0])),l=c(a&&a.name||e.type)}return r+e.id+'{{"'+l+'"}}';case"link in":return l=c(e.name||e.links&&0<e.links.length&&n[e.links[0]]&&n[e.links[0]].name||e.type),r+e.id+'{{"'+l+'"}}';case"junction":return r+e.id+'(("conn"))';case"inject":case"debug":return r+e.id+'(["'+l+'"])';case"http in":return r+e.id+'["'+c("["+e.method+"] "+e.url)+'"]';case"mermaid-flowchart":return e.id+`@{ shape: "${e.shape}", label: "${l}" }`;default:return e.type.startsWith("subflow:")?(a=o.nodes.subflow(e.type.replace(/subflow:/,"")),l=c(a&&a.name||e.type),r+e.id+'[/"'+l+'"/]'):r+e.id+'["'+l+'"]'}};a.mermaid=["%% change this to LR Node-RED like UML","graph "+r];for(var h,t=0;t<e.length;t++){var u=e[t];if(u.links&&0<u.links.length&&"link out"==u.type)for(var m=0;m<u.links.length;m++)n[u.links[m]]&&a.mermaid.push(p(u)+" -.-> "+u.links[m]);if(u.wires&&0<u.wires.length)if("mermaid-flowchart"==u.type)for(var f=0;f<u.wires.length;f++)for(var w=0;w<u.wires[f].length;w++){var g=u.wires[f][w];(u.wirecfgs||[]).forEach(r=>{if(r.id==g&&n[g]){let e=" --\x3e ";var l=c(r.name||"");switch(r.arrow||"arrow"){case"line":e=""!==l?` -- "${l}" --- `:" --- ";break;case"arrow":e=""!==l?` -- "${l}" --> `:" --\x3e ";break;case"thickarrow":e=""!==l?` == "${l}" ==> `:" ==> ";break;case"dotarrow":e=""!==l?` -. "${l}" .-> `:" -.-> "}a.mermaid.push(p(u)+e+p(n[u.wires[f][w]],y&&y[f]||void 0))}})}else if("switch"==u.type)for(f=0;f<u.wires.length;f++)for(w=0;w<u.wires[f].length;w++)n[u.wires[f][w]]&&a.mermaid.push(p(u)+" --\x3e "+p(n[u.wires[f][w]],(h=u.rules[f]).v&&h.t?d(h.t)+" "+h.v:h.v&&!h.t?h.v:d(h.t)));else{var k,y=u.outputLabels;u.type.startsWith("subflow:")&&(k=o.nodes.subflow(u.type.replace(/subflow:/,"")),y=k&&k.outputLabels||y);for(f=0;f<u.wires.length;f++)for(w=0;w<u.wires[f].length;w++)n[u.wires[f][w]]&&a.mermaid.push(p(u)+" --\x3e "+p(n[u.wires[f][w]],y&&y[f]||void 0))}}for(var v=Object.keys(i),b=new Set,A=e=>{0<e.nodesids.length&&(a.mermaid.push("subgraph "+c(e.name)),e.nodesids.forEach(e=>{"object"==typeof e?A(e):a.mermaid.push(e)}),a.mermaid.push("end"))},j=e=>"object"==typeof e||v.indexOf(e)<0,E=0;b.size<v.length&&E<2*v.length;)v.forEach(e=>{(!(i[e]&&0<i[e].nodesids.length)||(i[e].nodesids=i[e].nodesids.map(e=>{var r;return-1<v.indexOf(e)&&b.has(e)?(r={...i[e]},delete i[e],r):e}),i[e].nodesids.every(j)))&&b.add(e)}),E+=1;return Object.keys(i).forEach(e=>{0<i[e].nodesids.length&&A(i[e])}),a.mermaid.join("\n")}};