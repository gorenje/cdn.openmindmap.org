(()=>{function F(e,a,r){switch(e.arrow||"arrow"){case"--":case"line":a=""!==r?` -- "${r}" --- `:" --- ";break;case"--\x3e":case"arrow":a=""!==r?` -- "${r}" --> `:" --\x3e ";break;case"==>":case"thickarrow":a=""!==r?` == "${r}" ==> `:" ==> ";break;case"-.->":case"dotarrow":a=""!==r?` -. "${r}" .-> `:" -.-> ";break;case"-.-":a=""!==r?` -. "${r}" -.- `:" -.- ";break;case"==":a=""!==r?` == "${r}" === `:" === ";break;case"<--\x3e":a=""!==r?` <-- "${r}" --> `:" <---\x3e ";break;case"<-.->":a=""!==r?` <-. "${r}" .-> `:" <-.-> ";break;case"<==>":a=""!==r?` <== "${r}" ==> `:" <===> ";break;case"--x":a=""!==r?` -- "${r}" --x `:" --x ";break;case"-.-x":a=""!==r?` -. "${r}" .-x `:" -.-x ";break;case"==x":a=""!==r?` == "${r}" ==x `:" ===x ";break;case"x--x":a=""!==r?` x-- "${r}" --x `:" x--x ";break;case"x-.-x":a=""!==r?` x-. "${r}" .-x `:" x-.-x ";break;case"x==x":a=""!==r?` x== "${r}" ==x `:" x===x ";break;case"--o":a=""!==r?` -- "${r}" --o `:" --o ";break;case"-.-o":a=""!==r?` -. "${r}" .-o `:" -.-o ";break;case"==o":a=""!==r?` == "${r}" ==o `:" ===o ";break;case"o--o":a=""!==r?` o-- "${r}" --o `:" o--o ";break;case"o-.-o":a=""!==r?` o-. "${r}" .-o `:" o-.-o ";break;case"o==o":a=""!==r?` o== "${r}" ==o `:" o===o "}return a}window.FlowToMermaid={constructMermaid:function(e,a="TB",r=void 0){for(var t={payload:e},n={},e=t.payload.filter(e=>("group"==e.type&&(n[e.id]={nodesids:[...e.nodes||[]],name:e.name||`**missing name ${e.id}**`,env:[...e.env||[]]}),"tab"!=e.type&&"group"!=e.type)),o={},l=0;l<e.length;l++){var s=e[l];o[s.id]=s}var i=r,c=(r||(i={nodes:{node:e=>o[e],subflow:e=>o[e]}}),e=>e&&{nnull:"not null",eq:"==",neq:"!=",lt:"<",lte:"<=",gt:">",gte:">=",hask:"has key",cont:"contains"}[e]||e),d=e=>e.replaceAll("&","&amp;").replaceAll("#","#35;").replaceAll("[","#91;").replaceAll("]","#93;").replaceAll("(","#40;").replaceAll(")","#41;").replaceAll("|","#124;").replaceAll(">","&gt;").replaceAll("<","&lt;").replaceAll("{","#123;").replaceAll("}","#125;").replaceAll("/","#47;").replaceAll('"',"#34;"),h=(e,a=void 0)=>{if(!e)return"";var r=e.name||e.type;switch(a=a?'|"'+d(a)+'"| ':"",r=d(r),e.type){case"switch":case"join":case"split":return a+e.id+'{"'+r+'"}';case"link call":case"link out":if(e.mode&&"return"==e.mode)return a+e.id+"[\\Link Return/]";if(!e.name||e.name.match(/^link out/)){if("dynamic"==e.linkType)return a+e.id+'{{"'+(r="\\Dynamic Target/")+'"}}';var t=e.links&&0<e.links.length&&(o[e.links[0]]||i.nodes.node(e.links[0])),r=d(t&&t.name||e.type)}return a+e.id+'{{"'+r+'"}}';case"link in":return r=d(e.name||e.links&&0<e.links.length&&o[e.links[0]]&&o[e.links[0]].name||e.type),a+e.id+'{{"'+r+'"}}';case"junction":return a+e.id+'(("conn"))';case"inject":case"debug":return a+e.id+'(["'+r+'"])';case"http in":return a+e.id+'["'+d("["+e.method+"] "+e.url)+'"]';case"mermaid-flowchart":return e.id+`@{ shape: "${e.shape}", label: "${r}" }`;default:return e.type.startsWith("subflow:")?(t=i.nodes.subflow(e.type.replace(/subflow:/,"")),r=d(t&&t.name||e.type),a+e.id+'[/"'+r+'"/]'):a+e.id+'["'+r+'"]'}};t.mermaid=["%% Generated by the Flow2UML Node @ https://flowhub.org/flow2uml","%% change direction to LR for Node-RED left-to-right UML","flowchart "+a],console.log("FLOW2UML: WARNING when copy & pasting flow chart nodes, their connections details are losts."),console.log("FLOW2UML: WARNING This is because the configuration of wires is based on node ids, these "),console.log("FLOW2UML: WARNING node ids change on copy and paste but aren't updated in the configuration "),console.log("FLOW2UML: WARNING of individual flowchart nodes.");for(var p,l=0;l<e.length;l++){var m=e[l];if(m.links&&0<m.links.length&&"link out"==m.type)for(var u=0;u<m.links.length;u++)o[m.links[u]]&&t.mermaid.push(h(m)+" -.-> "+m.links[u]);if(m.wires&&0<m.wires.length)if("mermaid-flowchart"==m.type){(m.wirecfgs||[]).forEach(e=>{var a,r;e.id==m.id&&(r=m.id,o[r])&&(r=" --\x3e ",a=d(e.name||""),r=F(e," --\x3e ",a),t.mermaid.push(h(m)+r+h(m)))});for(var f=0;f<m.wires.length;f++)for(var k=0;k<m.wires[f].length;k++){var w=m.wires[f][k];(m.wirecfgs||[]).forEach(e=>{var a,r;e.id==w&&o[w]&&(r=" --\x3e ",a=d(e.name||""),r=F(e," --\x3e ",a),t.mermaid.push(h(m)+r+h(o[m.wires[f][k]],b&&b[f]||void 0)))})}}else if("switch"==m.type)for(f=0;f<m.wires.length;f++)for(k=0;k<m.wires[f].length;k++)o[m.wires[f][k]]&&t.mermaid.push(h(m)+" --\x3e "+h(o[m.wires[f][k]],(p=m.rules[f]).v&&p.t?c(p.t)+" "+p.v:p.v&&!p.t?p.v:c(p.t)));else{var g,b=m.outputLabels;m.type.startsWith("subflow:")&&(g=i.nodes.subflow(m.type.replace(/subflow:/,"")),b=g&&g.outputLabels||b);for(f=0;f<m.wires.length;f++)for(k=0;k<m.wires[f].length;k++)o[m.wires[f][k]]&&t.mermaid.push(h(m)+" --\x3e "+h(o[m.wires[f][k]],b&&b[f]||void 0))}}for(var v=Object.keys(n),y=new Set,x=e=>{var a;0<e.nodesids.length&&(t.mermaid.push(`subgraph "${d(e.name)}"`),(a=(e.env.filter(e=>"MERMAID_DIRECTION"==e.name)[0]||{value:void 0}).value)&&t.mermaid.push("direction "+a),e.nodesids.forEach(e=>{"object"==typeof e?x(e):t.mermaid.push(e)}),t.mermaid.push("end"))},A=e=>"object"==typeof e||v.indexOf(e)<0,L=0;y.size<v.length&&L<2*v.length;)v.forEach(e=>{(!(n[e]&&0<n[e].nodesids.length)||(n[e].nodesids=n[e].nodesids.map(e=>{var a;return-1<v.indexOf(e)&&y.has(e)?(a={...n[e]},delete n[e],a):e}),n[e].nodesids.every(A)))&&y.add(e)}),L+=1;return Object.keys(n).forEach(e=>{0<n[e].nodesids.length&&x(n[e])}),t.mermaid.join("\n")},constructErlangStatem:function(e){let o=[];for(var l={},a=0;a<e.length;a++){var r=e[a];l[r.id]=r}for(a=0;a<e.length;a++){var s=e[a];if("mermaid-flowchart"==s.type){let n=(s.name||"unknown_state").replaceAll(/\s\t\n /g,"_");n=n.toLowerCase(),(s.wirecfgs||[]).forEach(a=>{var r=a.name.split(";").map(e=>e.trim()),t=(l[a.id].name||"unknown_state").toLowerCase().replaceAll(/\s\t\n /g,"_");if(1!=r.length||""!=r[0]){let e="";e=s.id==a.id?1==r.length?`
handle_event(
    {call, From},
    <<"${r[0]}">>,
    ${n},
    Data
) ->
    {keep_state, Data, [{ reply, From, ${r[2]||"ok"} }]};`:`
handle_event(
    {call, From},
    {<<"${r[0]}">>, <<"${r[1]}">>},
    ${n},
    Data
) ->
    {keep_state, Data, [{ reply, From, ${r[2]||"ok"} }]};`:1==r.length?`
handle_event(
    {call, From},
    <<"${r[0]}">>,
    ${n},
    Data
) ->
    {next_state, ${t}, Data, [{ reply, From, ${r[2]||"ok"} }]};`:`
handle_event(
    {call, From},
    {<<"${r[0]}">>, <<"${r[1]}">>},
    ${n},
    Data
) ->
    {next_state, ${t}, Data, [{ reply, From, ${r[2]||"ok"} }]};`,o.push(e)}})}}return o.join("\n")}}})();